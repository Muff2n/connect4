from connect4.board_c import Board
from connect4.utils import Result

import pytest

import numpy as np


# Board tests
pieces_1 = [
    np.array([[0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0],
              [1, 1, 1, 1, 0, 0, 0]], dtype=np.bool_),
    np.array([[1, 0, 0, 0, 0, 0, 0],
              [1, 0, 0, 0, 0, 0, 0],
              [1, 0, 0, 0, 0, 0, 0],
              [1, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0]], dtype=np.bool_),
    np.array([[0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0],
              [1, 0, 0, 0, 0, 0, 0],
              [1, 0, 0, 0, 0, 0, 0],
              [1, 0, 0, 0, 0, 0, 0],
              [1, 0, 0, 0, 0, 0, 0]], dtype=np.bool_),
    np.array([[0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 1],
              [0, 0, 0, 0, 0, 0, 1],
              [0, 0, 0, 0, 0, 0, 1],
              [0, 0, 0, 0, 0, 0, 1]], dtype=np.bool_),
    np.array([[0, 0, 0, 0, 0, 0, 1],
              [0, 0, 0, 0, 0, 0, 1],
              [0, 0, 0, 0, 0, 0, 1],
              [0, 0, 0, 0, 0, 0, 1],
              [0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0]], dtype=np.bool_),
    np.array([[0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 1, 0, 0, 0],
              [0, 0, 1, 0, 0, 0, 0],
              [0, 1, 0, 0, 0, 0, 0],
              [1, 1, 1, 0, 0, 0, 0]], dtype=np.bool_),
    np.array([[0, 0, 0, 1, 0, 0, 0],
              [0, 0, 0, 0, 1, 0, 0],
              [0, 0, 0, 0, 0, 1, 1],
              [0, 0, 0, 0, 1, 1, 1],
              [0, 0, 0, 1, 0, 0, 0],
              [0, 0, 0, 0, 1, 0, 1]], dtype=np.bool_),
    np.array([[0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 1, 0, 0, 0],
              [0, 0, 0, 1, 1, 0, 0],
              [0, 0, 0, 1, 0, 0, 0],
              [0, 0, 0, 0, 1, 1, 1],
              [1, 0, 0, 1, 0, 1, 0]], dtype=np.bool_),
    np.array([[0, 1, 1, 0, 0, 1, 1],
              [1, 0, 1, 1, 0, 1, 0],
              [1, 1, 1, 0, 0, 0, 1],
              [1, 0, 0, 0, 1, 1, 1],
              [0, 1, 1, 1, 0, 0, 0],
              [0, 0, 1, 1, 0, 0, 0]], dtype=np.bool_),
    np.array([[1, 0, 0, 0, 0, 0, 0],
              [1, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 1],
              [1, 0, 1, 1, 1, 0, 0],
              [1, 1, 1, 0, 1, 0, 1],
              [1, 0, 1, 1, 0, 1, 1]], dtype=np.bool_),
    np.array([[0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 1, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 1, 1, 0],
              [0, 0, 0, 1, 0, 1, 0],
              [1, 1, 1, 0, 0, 1, 0]], dtype=np.bool_)


    ]
pieces_2 = [
    np.array([[0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0],
              [1, 1, 1, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0]], dtype=np.bool_),
    np.array([[0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0],
              [1, 0, 0, 0, 0, 0, 0],
              [1, 1, 0, 0, 0, 0, 0]], dtype=np.bool_),
    np.array([[0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 1],
              [0, 0, 0, 0, 0, 0, 1],
              [0, 0, 0, 0, 0, 0, 1]], dtype=np.bool_),
    np.array([[0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 1, 0],
              [0, 0, 0, 0, 0, 1, 0],
              [0, 0, 0, 0, 0, 1, 0]], dtype=np.bool_),
    np.array([[0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 1],
              [0, 0, 0, 0, 0, 1, 1]], dtype=np.bool_),
    np.array([[0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 1, 0, 0, 0],
              [1, 0, 1, 1, 0, 0, 0],
              [0, 0, 0, 1, 0, 0, 0]], dtype=np.bool_),
    np.array([[0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 1, 0, 0, 0],
              [0, 0, 0, 1, 1, 0, 0],
              [0, 0, 0, 1, 0, 0, 0],
              [0, 0, 0, 0, 1, 1, 1],
              [0, 0, 0, 1, 0, 1, 0]], dtype=np.bool_),
    np.array([[0, 0, 0, 1, 0, 0, 0],
              [0, 0, 0, 0, 1, 0, 0],
              [0, 0, 0, 0, 0, 1, 1],
              [0, 0, 0, 0, 1, 1, 1],
              [0, 0, 0, 1, 0, 0, 0],
              [0, 0, 0, 0, 1, 0, 1]], dtype=np.bool_),
    np.array([[1, 0, 0, 1, 1, 0, 0],
              [0, 1, 0, 0, 1, 0, 1],
              [0, 0, 0, 1, 1, 1, 0],
              [0, 1, 1, 1, 0, 0, 0],
              [1, 0, 0, 0, 1, 1, 1],
              [1, 1, 0, 0, 1, 1, 1]], dtype=np.bool_),
    np.array([[0, 0, 1, 1, 1, 0, 1],
              [0, 0, 1, 1, 1, 0, 1],
              [1, 0, 1, 1, 1, 0, 0],
              [0, 1, 0, 0, 0, 0, 1],
              [0, 0, 0, 1, 0, 0, 0],
              [0, 1, 0, 0, 1, 0, 0]], dtype=np.bool_),
    np.array([[0, 0, 0, 1, 0, 0, 0],
              [0, 0, 0, 0, 1, 0, 0],
              [0, 0, 0, 1, 1, 0, 0],
              [0, 0, 0, 1, 0, 0, 0],
              [0, 0, 0, 0, 1, 0, 0],
              [0, 0, 0, 1, 1, 0, 0]], dtype=np.bool_)
    ]
ans = [1, 1, 1, 1, 1, 1, 1, 0, 0.5, 0, None]

assert len(pieces_1) == len(pieces_2) == len(ans)

@pytest.mark.parametrize("n,pieces_1,pieces_2,ans",
                         [(n, p1, p2, a) for n, p1, p2, a in zip(range(len(ans)), pieces_1, pieces_2, ans)])
def test_check_valid(n, pieces_1, pieces_2, ans):
    print("test_check_valid", n)
    board_ = Board.from_pieces(o_pieces=pieces_1,
                               x_pieces=pieces_2)

    print(board_)
    assert board_.result == (Result(ans) if ans is not None else None)
    return


def test_valid_moves():
    o_pieces = np.array(
        [[0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0]], dtype=np.bool_)

    x_pieces = np.array(
        [[0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0]], dtype=np.bool_)

    board_ = Board.from_pieces(o_pieces=o_pieces,
                               x_pieces=x_pieces)

    assert board_.valid_moves == set(range(7))

    o_pieces = np.array(
        [[0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 1],
         [0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 1],
         [0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 1]], dtype=np.bool_)

    x_pieces = np.array(
        [[0, 0, 0, 0, 0, 0, 1],
         [0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 1],
         [0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 1],
         [0, 0, 0, 0, 0, 0, 0]], dtype=np.bool_)

    board_ = Board.from_pieces(o_pieces=o_pieces,
                               x_pieces=x_pieces)

    assert board_.valid_moves == set(range(6))

    o_pieces = np.array(
        [[1, 1, 0, 0, 1, 1, 0],
         [0, 0, 1, 1, 0, 0, 1],
         [1, 1, 1, 0, 1, 1, 0],
         [0, 0, 0, 1, 0, 0, 1],
         [0, 1, 0, 0, 1, 1, 0],
         [0, 1, 1, 1, 0, 0, 1]], dtype=np.bool_)

    x_pieces = np.array(
        [[0, 0, 1, 1, 0, 0, 0],
         [1, 1, 0, 0, 1, 1, 0],
         [0, 0, 0, 1, 0, 0, 1],
         [1, 1, 1, 0, 1, 1, 0],
         [1, 0, 1, 1, 0, 0, 1],
         [1, 0, 0, 0, 1, 1, 0]], dtype=np.bool_)

    board_ = Board.from_pieces(o_pieces=o_pieces,
                               x_pieces=x_pieces)

    assert board_.valid_moves == set([6])

    o_pieces = np.array(
        [[0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 1, 1, 0, 0],
         [0, 0, 0, 0, 1, 0, 0],
         [0, 0, 0, 1, 1, 0, 0],
         [0, 0, 1, 0, 0, 0, 0],
         [0, 0, 0, 1, 1, 1, 0]], dtype=np.bool_)

    x_pieces = np.array(
        [[0, 0, 0, 1, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 1, 0, 0, 0],
         [0, 0, 1, 0, 0, 0, 0],
         [0, 0, 0, 1, 1, 0, 0],
         [1, 1, 1, 0, 0, 0, 1]], dtype=np.bool_)

    board_ = Board.from_pieces(o_pieces=o_pieces,
                               x_pieces=x_pieces)

    assert board_.valid_moves == set([0, 1, 2, 4, 5, 6])
